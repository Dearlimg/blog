// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package mysql

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :exec
insert into message(name, email, content, create_at)
values (?,?,?,now())
`

type CreateMessageParams struct {
	Name    string
	Email   string
	Content sql.NullString
}

func (q *Queries) CreateMessage(ctx context.Context, arg *CreateMessageParams) error {
	_, err := q.exec(ctx, q.createMessageStmt, createMessage, arg.Name, arg.Email, arg.Content)
	return err
}

const getMessage = `-- name: GetMessage :many
select id, name, email, content, create_at
from message
where id >0
order by create_at
desc
limit 5
`

func (q *Queries) GetMessage(ctx context.Context) ([]*Message, error) {
	rows, err := q.query(ctx, q.getMessageStmt, getMessage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Content,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
